// ============================================================================
// AfriConnect Exchange - Prisma Schema
// Converted from Supabase SQL Schema
// Version: 1.0
// ============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  buyer
  seller
  sme
  trainer
  admin
}

enum UserStatus {
  pending
  active
  suspended
  deactivated
  deleted
}

enum VerificationStatus {
  unverified
  pending
  verified
  rejected
}

enum PaymentMethod {
  cash
  card
  wallet
  paypal
  escrow
}

enum PaymentStatus {
  pending
  processing
  completed
  failed
  refunded
}

enum TransactionType {
  purchase
  barter
  remittance
  escrow
  refund
}

enum EscrowStatus {
  held
  released
  disputed
  refunded
}

enum BarterStatus {
  proposed
  counter_offered
  accepted
  rejected
  cancelled
  completed
}

enum OrderStatus {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
  disputed
}

enum NotificationType {
  order
  delivery
  promotional
  system
  security
}

enum NotificationChannel {
  in_app
  email
  sms
  push
}

enum AdvertStatus {
  draft
  active
  expired
  deleted
}

enum CourseDifficulty {
  beginner
  intermediate
  advanced
}

enum EnrollmentStatus {
  enrolled
  in_progress
  completed
  cancelled
}

enum DisputeStatus {
  open
  investigating
  resolved
  closed
}

enum SupportTicketStatus {
  open
  in_progress
  resolved
  closed
}

enum ReviewStatus {
  pending
  approved
  rejected
  flagged
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  id                      String             @id @default(uuid()) @db.Uuid
  email                   String             @unique @db.VarChar(255)
  // NextAuth-compatible fields
  // `emailVerified` must be nullable DateTime for the adapter
  emailVerified           DateTime?          @map("email_verified") @db.Timestamptz(6)
  // `name` and `image` are expected by NextAuth adapter (kept nullable)
  name                    String?            @db.VarChar(255)
  image                   String?            @db.Text

  phone                   String?            @unique @db.VarChar(20)
  passwordHash            String?            @map("password_hash") @db.Text
  fullName                String?            @map("full_name") @db.VarChar(255)
  profilePictureUrl       String?            @map("profile_picture_url") @db.Text
  bio                     String?            @db.Text
  address                 String?            @db.Text
  city                    String?            @db.VarChar(100)
  country                 String?            @default("United Kingdom") @db.VarChar(100)
  postcode                String?            @db.VarChar(20)
  roles                   UserRole[]         @default([buyer])
  status                  UserStatus         @default(pending)
  verificationStatus      VerificationStatus @default(unverified) @map("verification_status")
  phoneVerified           Boolean            @default(false) @map("phone_verified")
  freeAccessExpiresAt     DateTime?          @map("free_access_expires_at") @db.Timestamptz(6)
  language                String?            @default("en") @db.VarChar(10)
  timezone                String?            @default("Europe/London") @db.VarChar(50)
  notificationPreferences Json?              @default("{\"email\": true, \"sms\": true, \"push\": true, \"in_app\": true}") @map("notification_preferences") @db.JsonB
  kycDocuments            Json?              @map("kyc_documents") @db.JsonB
  kycSubmittedAt          DateTime?          @map("kyc_submitted_at") @db.Timestamptz(6)
  kycVerifiedAt           DateTime?          @map("kyc_verified_at") @db.Timestamptz(6)
  lastLoginAt             DateTime?          @map("last_login_at") @db.Timestamptz(6)
  loginCount              Int                @default(0) @map("login_count")
  createdAt               DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt               DateTime?          @map("deleted_at") @db.Timestamptz(6)

  // Relations
  userSessions            UserSession[]
  preferences             UserPreference?
  socialAuths             SocialAuth[]
  products                Product[]
  services                Service[]
  transactions            Transaction[]
  buyerOrders             Order[]            @relation("BuyerOrders")
  sellerOrders            Order[]            @relation("SellerOrders")
  buyerEscrows            EscrowTransaction[] @relation("BuyerEscrows")
  sellerEscrows           EscrowTransaction[] @relation("SellerEscrows")
  proposedBarters         BarterProposal[]   @relation("ProposedBarters")
  receivedBarters         BarterProposal[]   @relation("ReceivedBarters")
  adverts                 Advert[]
  notifications           Notification[]
  courses                 Course[]
  enrollments             Enrollment[]
  salesReports            SalesReport[]
  sentRemittances         Remittance[]
  reviewsGiven            Review[]           @relation("ReviewsGiven")
  reviewsReceived         Review[]           @relation("ReviewsReceived")
  kycSubmissions          KycSubmission[]    @relation("KycSubmissions")
  kycReviews              KycSubmission[]    @relation("KycReviews")
  securityLogs            SecurityLog[]
  disputes                Dispute[]          @relation("Complainants")
  respondedDisputes       Dispute[]          @relation("Respondents")
  assignedDisputes        Dispute[]          @relation("AssignedDisputes")
  adminActions            AdminAction[]
  reportedContent         ModerationQueue[]  @relation("ReportedContent")
  reviewedContent         ModerationQueue[]  @relation("ReviewedContent")
  supportTickets          SupportTicket[]
  assignedTickets         SupportTicket[]    @relation("AssignedTickets")
  ticketMessages          TicketMessage[]
  chatbotConversations    ChatbotConversation[]
  onboardingProgress      UserOnboardingProgress?
  systemLogs              SystemLog[]
  activityLogs            ActivityLog[]
  emailLogs               EmailLog[]
  devices                 DeviceInfo[]
  analyticsEvents         AnalyticsEvent[]
  passwordResetTokens     PasswordResetToken[]
  // Relations for NextAuth adapter
  accounts                Account[]
  sessions                Session[]

  @@map("users")
}

model UserSession {
  id                 String    @id @default(uuid()) @db.Uuid
  userId             String    @map("user_id") @db.Uuid
  deviceId           String?   @map("device_id") @db.VarChar(255)
  deviceType         String?   @map("device_type") @db.VarChar(50)
  deviceName         String?   @map("device_name") @db.VarChar(255)
  browser            String?   @db.VarChar(100)
  os                 String?   @db.VarChar(100)
  ipAddress          String?   @map("ip_address") @db.Inet
  userAgent          String?   @map("user_agent") @db.Text
  locationData       Json?     @map("location_data") @db.JsonB
  sessionToken       String?   @unique @map("session_token") @db.Text
  refreshToken       String?   @map("refresh_token") @db.Text
  sessionTokenHash   String?   @map("session_token_hash") @db.Text
  refreshTokenHash   String?   @map("refresh_token_hash") @db.Text
  revokedAt          DateTime? @map("revoked_at") @db.Timestamptz(6)
  expiresAt          DateTime  @map("expires_at") @db.Timestamptz(6)
  isActive           Boolean   @default(true) @map("is_active")
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  lastActivityAt     DateTime  @default(now()) @map("last_activity_at") @db.Timestamptz(6)

  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyticsEvents    AnalyticsEvent[]
  systemLogs         SystemLog[]
  activityLogs       ActivityLog[]

  @@index([userId])
  @@index([sessionToken])
  @@index([ipAddress])
  @@index([createdAt])
  @@map("user_sessions")
}

model UserPreference {
  id                   String   @id @default(uuid()) @db.Uuid
  userId               String   @unique @map("user_id") @db.Uuid
  notificationsEnabled Boolean  @default(true) @map("notifications_enabled")
  marketingEmails      Boolean  @default(false) @map("marketing_emails")
  twoFactorEnabled     Boolean  @default(false) @map("two_factor_enabled")
  privacySettings      Json?    @default("{}") @map("privacy_settings") @db.JsonB
  displayPreferences   Json?    @default("{}") @map("display_preferences") @db.JsonB
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model SocialAuth {
  id               String    @id @default(uuid()) @db.Uuid
  userId           String    @map("user_id") @db.Uuid
  provider         String    @db.VarChar(50)
  providerUserId   String    @map("provider_user_id") @db.VarChar(255)
  accessToken      String?   @map("access_token") @db.Text
  refreshToken     String?   @map("refresh_token") @db.Text
  tokenExpiresAt   DateTime? @map("token_expires_at") @db.Timestamptz(6)
  profileData      Json?     @map("profile_data") @db.JsonB
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@map("social_auth")
}

// ============================================================================
// MARKETPLACE
// ============================================================================

model Category {
  id           String    @id @default(uuid()) @db.Uuid
  name         String    @db.VarChar(255)
  slug         String    @unique @db.VarChar(255)
  description  String?   @db.Text
  parentId     String?   @map("parent_id") @db.Uuid
  iconUrl      String?   @map("icon_url") @db.Text
  displayOrder Int       @default(0) @map("display_order")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  parent       Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children     Category[] @relation("CategoryHierarchy")
  products     Product[]
  services     Service[]
  adverts      Advert[]
  courses      Course[]

  @@map("categories")
}

model Product {
  id                String    @id @default(uuid()) @db.Uuid
  sellerId          String    @map("seller_id") @db.Uuid
  categoryId        String?   @map("category_id") @db.Uuid
  title             String    @db.VarChar(255)
  slug              String    @unique @db.VarChar(255)
  description       String    @db.Text
  price             Decimal?  @db.Decimal(10, 2)
  isFree            Boolean   @default(false) @map("is_free")
  currency          String    @default("GBP") @db.VarChar(3)
  quantityAvailable Int       @default(1) @map("quantity_available")
  condition         String?   @db.VarChar(50)
  images            Json      @default("[]") @db.JsonB
  tags              String[]
  location          String?   @db.VarChar(255)
  latitude          Decimal?  @db.Decimal(10, 8)
  longitude         Decimal?  @db.Decimal(11, 8)
  isActive          Boolean   @default(true) @map("is_active")
  viewCount         Int       @default(0) @map("view_count")
  inquiryCount      Int       @default(0) @map("inquiry_count")
  purchaseCount     Int       @default(0) @map("purchase_count")
  averageRating     Decimal   @default(0.00) @map("average_rating") @db.Decimal(3, 2)
  reviewCount       Int       @default(0) @map("review_count")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  publishedAt       DateTime? @map("published_at") @db.Timestamptz(6)

  seller            User      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category          Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  orders            Order[]
  reviews           Review[]

  @@index([sellerId])
  @@index([categoryId])
  @@index([isActive])
  @@index([isFree])
  @@index([price])
  @@index([createdAt])
  @@map("products")
}

model Service {
  id            String    @id @default(uuid()) @db.Uuid
  providerId    String    @map("provider_id") @db.Uuid
  categoryId    String?   @map("category_id") @db.Uuid
  title         String    @db.VarChar(255)
  slug          String    @unique @db.VarChar(255)
  description   String    @db.Text
  priceFrom     Decimal?  @map("price_from") @db.Decimal(10, 2)
  priceTo       Decimal?  @map("price_to") @db.Decimal(10, 2)
  currency      String    @default("GBP") @db.VarChar(3)
  pricingModel  String?   @map("pricing_model") @db.VarChar(50)
  durationMinutes Int?    @map("duration_minutes")
  images        Json      @default("[]") @db.JsonB
  tags          String[]
  location      String?   @db.VarChar(255)
  isRemote      Boolean   @default(false) @map("is_remote")
  isActive      Boolean   @default(true) @map("is_active")
  viewCount     Int       @default(0) @map("view_count")
  inquiryCount  Int       @default(0) @map("inquiry_count")
  bookingCount  Int       @default(0) @map("booking_count")
  averageRating Decimal   @default(0.00) @map("average_rating") @db.Decimal(3, 2)
  reviewCount   Int       @default(0) @map("review_count")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  provider      User      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  category      Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  orders        Order[]
  reviews       Review[]

  @@index([providerId])
  @@index([categoryId])
  @@index([isActive])
  @@map("services")
}

// ============================================================================
// PAYMENTS & TRANSACTIONS
// ============================================================================

model Transaction {
  id                    String           @id @default(uuid()) @db.Uuid
  transactionRef        String           @unique @map("transaction_ref") @db.VarChar(100)
  userId                String           @map("user_id") @db.Uuid
  type                  TransactionType
  paymentMethod         PaymentMethod    @map("payment_method")
  status                PaymentStatus    @default(pending)
  amount                Decimal          @db.Decimal(10, 2)
  currency              String           @default("GBP") @db.VarChar(3)
  fee                   Decimal          @default(0.00) @db.Decimal(10, 2)
  netAmount             Decimal?         @map("net_amount") @db.Decimal(10, 2)
  description           String?          @db.Text
  metadata              Json?            @default("{}") @db.JsonB
  paymentProvider       String?          @map("payment_provider") @db.VarChar(50)
  providerTransactionId String?          @map("provider_transaction_id") @db.VarChar(255)
  providerResponse      Json?            @map("provider_response") @db.JsonB
  initiatedAt           DateTime         @default(now()) @map("initiated_at") @db.Timestamptz(6)
  completedAt           DateTime?        @map("completed_at") @db.Timestamptz(6)
  failedAt              DateTime?        @map("failed_at") @db.Timestamptz(6)
  failureReason         String?          @map("failure_reason") @db.Text
  refundedAt            DateTime?        @map("refunded_at") @db.Timestamptz(6)
  createdAt             DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user                  User             @relation(fields: [userId], references: [id], onDelete: Restrict)
  escrowTransaction     EscrowTransaction?
  remittance            Remittance?
  order                 Order?

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@index([transactionRef])
  @@map("transactions")
}

model EscrowTransaction {
  id              String       @id @default(uuid()) @db.Uuid
  transactionId   String       @unique @map("transaction_id") @db.Uuid
  buyerId         String       @map("buyer_id") @db.Uuid
  sellerId        String       @map("seller_id") @db.Uuid
  orderId         String?      @map("order_id") @db.Uuid
  amount          Decimal      @db.Decimal(10, 2)
  status          EscrowStatus @default(held)
  heldAt          DateTime     @default(now()) @map("held_at") @db.Timestamptz(6)
  autoReleaseAt   DateTime?    @map("auto_release_at") @db.Timestamptz(6)
  releasedAt      DateTime?    @map("released_at") @db.Timestamptz(6)
  disputedAt      DateTime?    @map("disputed_at") @db.Timestamptz(6)
  disputeReason   String?      @map("dispute_reason") @db.Text
  resolvedAt      DateTime?    @map("resolved_at") @db.Timestamptz(6)
  resolutionNotes String?      @map("resolution_notes") @db.Text
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  transaction     Transaction  @relation(fields: [transactionId], references: [id], onDelete: Restrict)
  buyer           User         @relation("BuyerEscrows", fields: [buyerId], references: [id], onDelete: Restrict)
  seller          User         @relation("SellerEscrows", fields: [sellerId], references: [id], onDelete: Restrict)
  disputes        Dispute[]

  @@map("escrow_transactions")
}

model BarterProposal {
  id                      String        @id @default(uuid()) @db.Uuid
  proposerId              String        @map("proposer_id") @db.Uuid
  recipientId             String        @map("recipient_id") @db.Uuid
  offeredItemType         String        @map("offered_item_type") @db.VarChar(20)
  offeredItemId           String        @map("offered_item_id") @db.Uuid
  requestedItemType       String        @map("requested_item_type") @db.VarChar(20)
  requestedItemId         String        @map("requested_item_id") @db.Uuid
  offerDescription        String?       @map("offer_description") @db.Text
  status                  BarterStatus  @default(proposed)
  counterOfferDescription String?       @map("counter_offer_description") @db.Text
  expiresAt               DateTime?     @map("expires_at") @db.Timestamptz(6)
  acceptedAt              DateTime?     @map("accepted_at") @db.Timestamptz(6)
  rejectedAt              DateTime?     @map("rejected_at") @db.Timestamptz(6)
  completedAt             DateTime?     @map("completed_at") @db.Timestamptz(6)
  cancelledAt             DateTime?     @map("cancelled_at") @db.Timestamptz(6)
  cancellationReason      String?       @map("cancellation_reason") @db.Text
  createdAt               DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  proposer                User          @relation("ProposedBarters", fields: [proposerId], references: [id], onDelete: Cascade)
  recipient               User          @relation("ReceivedBarters", fields: [recipientId], references: [id], onDelete: Cascade)
  disputes                Dispute[]

  @@map("barter_proposals")
}

model Order {
  id                 String      @id @default(uuid()) @db.Uuid
  orderNumber        String      @unique @map("order_number") @db.VarChar(50)
  buyerId            String      @map("buyer_id") @db.Uuid
  sellerId           String      @map("seller_id") @db.Uuid
  transactionId      String?     @unique @map("transaction_id") @db.Uuid
  productId          String?     @map("product_id") @db.Uuid
  serviceId          String?     @map("service_id") @db.Uuid
  status             OrderStatus @default(pending)
  quantity           Int         @default(1)
  unitPrice          Decimal     @map("unit_price") @db.Decimal(10, 2)
  totalAmount        Decimal     @map("total_amount") @db.Decimal(10, 2)
  currency           String      @default("GBP") @db.VarChar(3)
  deliveryAddress    String?     @map("delivery_address") @db.Text
  deliveryNotes      String?     @map("delivery_notes") @db.Text
  trackingNumber     String?     @map("tracking_number") @db.VarChar(255)
  courierName        String?     @map("courier_name") @db.VarChar(100)
  shippedAt          DateTime?   @map("shipped_at") @db.Timestamptz(6)
  deliveredAt        DateTime?   @map("delivered_at") @db.Timestamptz(6)
  confirmedAt        DateTime?   @map("confirmed_at") @db.Timestamptz(6)
  cancelledAt        DateTime?   @map("cancelled_at") @db.Timestamptz(6)
  cancellationReason String?     @map("cancellation_reason") @db.Text
  createdAt          DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  buyer              User        @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Restrict)
  seller             User        @relation("SellerOrders", fields: [sellerId], references: [id], onDelete: Restrict)
  transaction        Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)
  product            Product?    @relation(fields: [productId], references: [id], onDelete: SetNull)
  service            Service?    @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  deliveryTracking   DeliveryTracking?
  reviews            Review[]
  disputes           Dispute[]

  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
  @@index([createdAt])
  @@index([orderNumber])
  @@map("orders")
}

// ============================================================================
// ADVERTS
// ============================================================================

model Advert {
  id           String       @id @default(uuid()) @db.Uuid
  smeId        String       @map("sme_id") @db.Uuid
  title        String       @db.VarChar(255)
  description  String       @db.Text
  categoryId   String?      @map("category_id") @db.Uuid
  images       Json         @default("[]") @db.JsonB
  targetUrl    String?      @map("target_url") @db.Text
  durationDays Int          @default(30) @map("duration_days")
  status       AdvertStatus @default(draft)
  impressions  Int          @default(0)
  clicks       Int          @default(0)
  leads        Int          @default(0)
  startDate    DateTime?    @map("start_date") @db.Timestamptz(6)
  endDate      DateTime?    @map("end_date") @db.Timestamptz(6)
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  publishedAt  DateTime?    @map("published_at") @db.Timestamptz(6)
  expiredAt    DateTime?    @map("expired_at") @db.Timestamptz(6)

  sme          User         @relation(fields: [smeId], references: [id], onDelete: Cascade)
  category     Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("adverts")
}

// ============================================================================
// NEXTAUTH MODELS (Prisma Adapter)
// These tables are used by next-auth's Prisma adapter. They intentionally
// co-exist with the app's existing session/devices tables. Names are mapped
// to the conventional `accounts`, `sessions`, and `verification_tokens`.
// ============================================================================

model Account {
  id                 String  @id @default(uuid()) @db.Uuid
  userId             String  @map("user_id") @db.Uuid
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


// ============================================================================
// NOTIFICATIONS
// ============================================================================

model Notification {
  id             String              @id @default(uuid()) @db.Uuid
  userId         String              @map("user_id") @db.Uuid
  type           NotificationType
  channel        NotificationChannel
  title          String              @db.VarChar(255)
  message        String              @db.Text
  data           Json?               @default("{}") @db.JsonB
  readAt         DateTime?           @map("read_at") @db.Timestamptz(6)
  sentAt         DateTime?           @map("sent_at") @db.Timestamptz(6)
  deliveryStatus String?             @map("delivery_status") @db.VarChar(50)
  errorMessage   String?             @map("error_message") @db.Text
  createdAt      DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)

  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([readAt])
  @@map("notifications")
}

// ============================================================================
// LMS (Learning Management System)
// ============================================================================

model Course {
  id              String            @id @default(uuid()) @db.Uuid
  instructorId    String            @map("instructor_id") @db.Uuid
  categoryId      String?           @map("category_id") @db.Uuid
  title           String            @db.VarChar(255)
  slug            String            @unique @db.VarChar(255)
  description     String            @db.Text
  difficulty      CourseDifficulty?
  durationMinutes Int?              @map("duration_minutes")
  price           Decimal?          @db.Decimal(10, 2)
  currency        String            @default("GBP") @db.VarChar(3)
  isFree          Boolean           @default(false) @map("is_free")
  thumbnailUrl    String?           @map("thumbnail_url") @db.Text
  previewVideoUrl String?           @map("preview_video_url") @db.Text
  language        String            @default("en") @db.VarChar(10)
  isPublished     Boolean           @default(false) @map("is_published")
  enrollmentCount Int               @default(0) @map("enrollment_count")
  completionCount Int               @default(0) @map("completion_count")
  averageRating   Decimal           @default(0.00) @map("average_rating") @db.Decimal(3, 2)
  reviewCount     Int               @default(0) @map("review_count")
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  publishedAt     DateTime?         @map("published_at") @db.Timestamptz(6)

  instructor      User              @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  category        Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  modules         CourseModule[]
  enrollments     Enrollment[]

  @@map("courses")
}

model CourseModule {
  id              String         @id @default(uuid()) @db.Uuid
  courseId        String         @map("course_id") @db.Uuid
  title           String         @db.VarChar(255)
  description     String?        @db.Text
  orderIndex      Int            @map("order_index")
  durationMinutes Int?           @map("duration_minutes")
  createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  course          Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons         CourseLesson[]

  @@map("course_modules")
}

model CourseLesson {
  id              String           @id @default(uuid()) @db.Uuid
  moduleId        String           @map("module_id") @db.Uuid
  title           String           @db.VarChar(255)
  content         String?          @db.Text
  videoUrl        String?          @map("video_url") @db.Text
  resources       Json             @default("[]") @db.JsonB
  orderIndex      Int              @map("order_index")
  durationMinutes Int?             @map("duration_minutes")
  isPreview       Boolean          @default(false) @map("is_preview")
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  module          CourseModule     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress        LessonProgress[]

  @@map("course_lessons")
}

model Enrollment {
  id                   String             @id @default(uuid()) @db.Uuid
  userId               String             @map("user_id") @db.Uuid
  courseId             String             @map("course_id") @db.Uuid
  status               EnrollmentStatus   @default(enrolled)
  progressPercentage   Decimal            @default(0.00) @map("progress_percentage") @db.Decimal(5, 2)
  lastAccessedAt       DateTime?          @map("last_accessed_at") @db.Timestamptz(6)
  completedAt          DateTime?          @map("completed_at") @db.Timestamptz(6)
  certificateIssuedAt  DateTime?          @map("certificate_issued_at") @db.Timestamptz(6)
  certificateUrl       String?            @map("certificate_url") @db.Text
  createdAt            DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  course               Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonProgress       LessonProgress[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([status])
  @@map("enrollments")
}

model LessonProgress {
  id                  String        @id @default(uuid()) @db.Uuid
  enrollmentId        String        @map("enrollment_id") @db.Uuid
  lessonId            String        @map("lesson_id") @db.Uuid
  isCompleted         Boolean       @default(false) @map("is_completed")
  progressPercentage  Decimal       @default(0.00) @map("progress_percentage") @db.Decimal(5, 2)
  timeSpentSeconds    Int           @default(0) @map("time_spent_seconds")
  lastPositionSeconds Int           @default(0) @map("last_position_seconds")
  completedAt         DateTime?     @map("completed_at") @db.Timestamptz(6)
  createdAt           DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  enrollment          Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson              CourseLesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, lessonId])
  @@map("lesson_progress")
}

// ============================================================================
// ANALYTICS & REPORTING
// ============================================================================

model AnalyticsEvent {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String?   @map("user_id") @db.Uuid
  sessionId   String?   @map("session_id") @db.Uuid
  eventType   String    @map("event_type") @db.VarChar(100)
  eventName   String    @map("event_name") @db.VarChar(255)
  eventData   Json?     @default("{}") @map("event_data") @db.JsonB
  pageUrl     String?   @map("page_url") @db.Text
  referrerUrl String?   @map("referrer_url") @db.Text
  deviceInfo  Json?     @map("device_info") @db.JsonB
  ipAddress   String?   @map("ip_address") @db.Inet
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  session     UserSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@map("analytics_events")
}

model SalesReport {
  id           String   @id @default(uuid()) @db.Uuid
  sellerId     String   @map("seller_id") @db.Uuid
  reportPeriod String   @map("report_period") @db.VarChar(50)
  startDate    DateTime @map("start_date") @db.Date
  endDate      DateTime @map("end_date") @db.Date
  totalSales   Decimal  @default(0.00) @map("total_sales") @db.Decimal(10, 2)
  totalOrders  Int      @default(0) @map("total_orders")
  totalRevenue Decimal  @default(0.00) @map("total_revenue") @db.Decimal(10, 2)
  totalFees    Decimal  @default(0.00) @map("total_fees") @db.Decimal(10, 2)
  netRevenue   Decimal  @default(0.00) @map("net_revenue") @db.Decimal(10, 2)
  reportData   Json?    @default("{}") @map("report_data") @db.JsonB
  generatedAt  DateTime @default(now()) @map("generated_at") @db.Timestamptz(6)

  seller       User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("sales_reports")
}

// ============================================================================
// REMITTANCES
// ============================================================================

model Remittance {
  id                      String        @id @default(uuid()) @db.Uuid
  transactionId           String        @unique @map("transaction_id") @db.Uuid
  senderId                String        @map("sender_id") @db.Uuid
  recipientName           String        @map("recipient_name") @db.VarChar(255)
  recipientPhone          String        @map("recipient_phone") @db.VarChar(20)
  recipientCountry        String        @map("recipient_country") @db.VarChar(100)
  recipientAccountDetails Json?         @map("recipient_account_details") @db.JsonB
  amount                  Decimal       @db.Decimal(10, 2)
  currency                String        @db.VarChar(3)
  exchangeRate            Decimal?      @map("exchange_rate") @db.Decimal(10, 6)
  localAmount             Decimal?      @map("local_amount") @db.Decimal(10, 2)
  localCurrency           String?       @map("local_currency") @db.VarChar(3)
  purpose                 String?       @db.VarChar(255)
  provider                String?       @db.VarChar(50)
  providerTransactionId   String?       @map("provider_transaction_id") @db.VarChar(255)
  status                  PaymentStatus @default(pending)
  deliveredAt             DateTime?     @map("delivered_at") @db.Timestamptz(6)
  createdAt               DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  transaction             Transaction   @relation(fields: [transactionId], references: [id], onDelete: Restrict)
  sender                  User          @relation(fields: [senderId], references: [id], onDelete: Restrict)

  @@map("remittances")
}

// ============================================================================
// REVIEWS & RATINGS
// ============================================================================

model Review {
  id                 String       @id @default(uuid()) @db.Uuid
  reviewerId         String       @map("reviewer_id") @db.Uuid
  revieweeId         String       @map("reviewee_id") @db.Uuid
  orderId            String?      @map("order_id") @db.Uuid
  productId          String?      @map("product_id") @db.Uuid
  serviceId          String?      @map("service_id") @db.Uuid
  rating             Int
  reviewText         String?      @map("review_text") @db.Text
  status             ReviewStatus @default(pending)
  isVerifiedPurchase Boolean      @default(false) @map("is_verified_purchase")
  helpfulCount       Int          @default(0) @map("helpful_count")
  unhelpfulCount     Int          @default(0) @map("unhelpful_count")
  flaggedCount       Int          @default(0) @map("flagged_count")
  sellerResponse     String?      @map("seller_response") @db.Text
  sellerRespondedAt  DateTime?    @map("seller_responded_at") @db.Timestamptz(6)
  approvedAt         DateTime?    @map("approved_at") @db.Timestamptz(6)
  rejectedAt         DateTime?    @map("rejected_at") @db.Timestamptz(6)
  rejectionReason    String?      @map("rejection_reason") @db.Text
  createdAt          DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  reviewer           User         @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee           User         @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)
  order              Order?       @relation(fields: [orderId], references: [id], onDelete: SetNull)
  product            Product?     @relation(fields: [productId], references: [id], onDelete: SetNull)
  service            Service?     @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@index([reviewerId])
  @@index([revieweeId])
  @@index([productId])
  @@index([serviceId])
  @@index([status])
  @@map("reviews")
}

// ============================================================================
// SECURITY & COMPLIANCE
// ============================================================================

model KycSubmission {
  id                 String             @id @default(uuid()) @db.Uuid
  userId             String             @map("user_id") @db.Uuid
  documentType       String             @map("document_type") @db.VarChar(50)
  documentNumber     String?            @map("document_number") @db.VarChar(100)
  documentUrl        String?            @map("document_url") @db.Text
  proofOfAddressUrl  String?            @map("proof_of_address_url") @db.Text
  selfieUrl          String?            @map("selfie_url") @db.Text
  status             VerificationStatus @default(pending)
  submittedAt        DateTime           @default(now()) @map("submitted_at") @db.Timestamptz(6)
  reviewedAt         DateTime?          @map("reviewed_at") @db.Timestamptz(6)
  reviewerId         String?            @map("reviewer_id") @db.Uuid
  rejectionReason    String?            @map("rejection_reason") @db.Text
  verificationNotes  String?            @map("verification_notes") @db.Text
  createdAt          DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user               User               @relation("KycSubmissions", fields: [userId], references: [id], onDelete: Cascade)
  reviewer           User?              @relation("KycReviews", fields: [reviewerId], references: [id], onDelete: SetNull)

  @@map("kyc_submissions")
}

model SecurityLog {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String?  @map("user_id") @db.Uuid
  eventType        String   @map("event_type") @db.VarChar(100)
  eventDescription String   @map("event_description") @db.Text
  ipAddress        String?  @map("ip_address") @db.Inet
  userAgent        String?  @map("user_agent") @db.Text
  severity         String?  @db.VarChar(20)
  isSuspicious     Boolean  @default(false) @map("is_suspicious")
  metadata         Json?    @default("{}") @db.JsonB
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  user             User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

model PasswordResetToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  tokenHash String   @map("token_hash") @db.Text
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

// ============================================================================
// ADMIN & MODERATION
// ============================================================================

model Dispute {
  id            String         @id @default(uuid()) @db.Uuid
  disputeRef    String         @unique @map("dispute_ref") @db.VarChar(50)
  orderId       String?        @map("order_id") @db.Uuid
  escrowId      String?        @map("escrow_id") @db.Uuid
  barterId      String?        @map("barter_id") @db.Uuid
  complainantId String         @map("complainant_id") @db.Uuid
  respondentId  String         @map("respondent_id") @db.Uuid
  status        DisputeStatus  @default(open)
  reason        String         @db.Text
  description   String         @db.Text
  evidence      Json           @default("[]") @db.JsonB
  assignedTo    String?        @map("assigned_to") @db.Uuid
  resolution    String?        @db.Text
  resolvedAt    DateTime?      @map("resolved_at") @db.Timestamptz(6)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  order         Order?         @relation(fields: [orderId], references: [id], onDelete: SetNull)
  escrow        EscrowTransaction? @relation(fields: [escrowId], references: [id], onDelete: SetNull)
  barter        BarterProposal? @relation(fields: [barterId], references: [id], onDelete: SetNull)
  complainant   User           @relation("Complainants", fields: [complainantId], references: [id], onDelete: Cascade)
  respondent    User           @relation("Respondents", fields: [respondentId], references: [id], onDelete: Cascade)
  assignee      User?          @relation("AssignedDisputes", fields: [assignedTo], references: [id], onDelete: SetNull)

  @@map("disputes")
}

model AdminAction {
  id         String   @id @default(uuid()) @db.Uuid
  adminId    String   @map("admin_id") @db.Uuid
  actionType String   @map("action_type") @db.VarChar(100)
  targetType String   @map("target_type") @db.VarChar(50)
  targetId   String   @map("target_id") @db.Uuid
  reason     String?  @db.Text
  details    Json?    @default("{}") @db.JsonB
  ipAddress  String?  @map("ip_address") @db.Inet
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  admin      User     @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_actions")
}

model ModerationQueue {
  id          String    @id @default(uuid()) @db.Uuid
  contentType String    @map("content_type") @db.VarChar(50)
  contentId   String    @map("content_id") @db.Uuid
  reportedBy  String?   @map("reported_by") @db.Uuid
  reason      String    @db.VarChar(255)
  details     String?   @db.Text
  status      String    @default("pending") @db.VarChar(50)
  reviewedBy  String?   @map("reviewed_by") @db.Uuid
  reviewedAt  DateTime? @map("reviewed_at") @db.Timestamptz(6)
  actionTaken String?   @map("action_taken") @db.VarChar(100)
  notes       String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  reporter    User?     @relation("ReportedContent", fields: [reportedBy], references: [id], onDelete: SetNull)
  reviewer    User?     @relation("ReviewedContent", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@map("moderation_queue")
}

// ============================================================================
// CUSTOMER CARE
// ============================================================================

model SupportTicket {
  id          String                @id @default(uuid()) @db.Uuid
  ticketNumber String               @unique @map("ticket_number") @db.VarChar(50)
  userId      String                @map("user_id") @db.Uuid
  category    String                @db.VarChar(50)
  subject     String                @db.VarChar(255)
  description String                @db.Text
  status      SupportTicketStatus   @default(open)
  priority    String                @default("medium") @db.VarChar(20)
  assignedTo  String?               @map("assigned_to") @db.Uuid
  assignedAt  DateTime?             @map("assigned_at") @db.Timestamptz(6)
  resolvedAt  DateTime?             @map("resolved_at") @db.Timestamptz(6)
  closedAt    DateTime?             @map("closed_at") @db.Timestamptz(6)
  resolution  String?               @db.Text
  createdAt   DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignee    User?                 @relation("AssignedTickets", fields: [assignedTo], references: [id], onDelete: SetNull)
  messages    TicketMessage[]
  chatbotEscalations ChatbotConversation[]

  @@map("support_tickets")
}

model TicketMessage {
  id          String   @id @default(uuid()) @db.Uuid
  ticketId    String   @map("ticket_id") @db.Uuid
  senderId    String   @map("sender_id") @db.Uuid
  message     String   @db.Text
  attachments Json     @default("[]") @db.JsonB
  isInternal  Boolean  @default(false) @map("is_internal")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("ticket_messages")
}

model ChatbotConversation {
  id                   String    @id @default(uuid()) @db.Uuid
  userId               String?   @map("user_id") @db.Uuid
  sessionId            String    @map("session_id") @db.VarChar(255)
  startedAt            DateTime  @default(now()) @map("started_at") @db.Timestamptz(6)
  endedAt              DateTime? @map("ended_at") @db.Timestamptz(6)
  wasEscalated         Boolean   @default(false) @map("was_escalated")
  escalatedToTicketId  String?   @unique @map("escalated_to_ticket_id") @db.Uuid
  satisfactionRating   Int?      @map("satisfaction_rating")

  user                 User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  escalatedTicket      SupportTicket? @relation(fields: [escalatedToTicketId], references: [id], onDelete: SetNull)
  messages             ChatbotMessage[]

  @@map("chatbot_conversations")
}

model ChatbotMessage {
  id              String              @id @default(uuid()) @db.Uuid
  conversationId  String              @map("conversation_id") @db.Uuid
  senderType      String              @map("sender_type") @db.VarChar(20)
  message         String              @db.Text
  intent          String?             @db.VarChar(100)
  confidenceScore Decimal?            @map("confidence_score") @db.Decimal(3, 2)
  createdAt       DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)

  conversation    ChatbotConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("chatbot_messages")
}

// ============================================================================
// ORDER TRACKING
// ============================================================================

model DeliveryTracking {
  id                String   @id @default(uuid()) @db.Uuid
  orderId           String   @unique @map("order_id") @db.Uuid
  trackingNumber    String   @map("tracking_number") @db.VarChar(255)
  courierName       String   @map("courier_name") @db.VarChar(100)
  currentStatus     String   @map("current_status") @db.VarChar(100)
  estimatedDelivery DateTime? @map("estimated_delivery") @db.Timestamptz(6)
  trackingHistory   Json     @default("[]") @map("tracking_history") @db.JsonB
  lastUpdatedAt     DateTime @default(now()) @map("last_updated_at") @db.Timestamptz(6)
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("delivery_tracking")
}

// ============================================================================
// USER ONBOARDING & HELP
// ============================================================================

model HelpArticle {
  id             String   @id @default(uuid()) @db.Uuid
  category       String   @db.VarChar(100)
  title          String   @db.VarChar(255)
  slug           String   @unique @db.VarChar(255)
  content        String   @db.Text
  tags           String[]
  viewCount      Int      @default(0) @map("view_count")
  helpfulCount   Int      @default(0) @map("helpful_count")
  unhelpfulCount Int      @default(0) @map("unhelpful_count")
  isPublished    Boolean  @default(true) @map("is_published")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("help_articles")
}

model UserOnboardingProgress {
  id                   String    @id @default(uuid()) @db.Uuid
  userId               String    @unique @map("user_id") @db.Uuid
  walkthroughCompleted Boolean   @default(false) @map("walkthrough_completed")
  completedSteps       Json      @default("[]") @map("completed_steps") @db.JsonB
  skipped              Boolean   @default(false)
  completedAt          DateTime? @map("completed_at") @db.Timestamptz(6)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_onboarding_progress")
}

// ============================================================================
// LOGGING & AUDIT
// ============================================================================

model SystemLog {
  id          String    @id @default(uuid()) @db.Uuid
  logLevel    String    @map("log_level") @db.VarChar(20)
  component   String    @db.VarChar(100)
  message     String    @db.Text
  errorCode   String?   @map("error_code") @db.VarChar(50)
  stackTrace  String?   @map("stack_trace") @db.Text
  userId      String?   @map("user_id") @db.Uuid
  sessionId   String?   @map("session_id") @db.Uuid
  requestId   String?   @map("request_id") @db.VarChar(100)
  metadata    Json?     @default("{}") @db.JsonB
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  session     UserSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([logLevel])
  @@index([createdAt])
  @@map("system_logs")
}

model ActivityLog {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String?   @map("user_id") @db.Uuid
  sessionId  String?   @map("session_id") @db.Uuid
  action     String    @db.VarChar(100)
  entityType String?   @map("entity_type") @db.VarChar(50)
  entityId   String?   @map("entity_id") @db.Uuid
  changes    Json?     @db.JsonB
  ipAddress  String?   @map("ip_address") @db.Inet
  userAgent  String?   @map("user_agent") @db.Text
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  user       User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  session    UserSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
  @@map("activity_logs")
}

model EmailLog {
  id                 String    @id @default(uuid()) @db.Uuid
  userId             String?   @map("user_id") @db.Uuid
  recipientEmail     String    @map("recipient_email") @db.VarChar(255)
  senderEmail        String?   @map("sender_email") @db.VarChar(255)
  subject            String    @map("subject") @db.VarChar(500)
  templateName       String?   @map("template_name") @db.VarChar(100)
  provider           String?   @db.VarChar(50)
  providerMessageId  String?   @map("provider_message_id") @db.VarChar(255)
  status             String    @default("pending") @db.VarChar(50)
  sentAt             DateTime? @map("sent_at") @db.Timestamptz(6)
  deliveredAt        DateTime? @map("delivered_at") @db.Timestamptz(6)
  openedAt           DateTime? @map("opened_at") @db.Timestamptz(6)
  clickedAt          DateTime? @map("clicked_at") @db.Timestamptz(6)
  bouncedAt          DateTime? @map("bounced_at") @db.Timestamptz(6)
  bounceReason       String?   @map("bounce_reason") @db.Text
  failedAt           DateTime? @map("failed_at") @db.Timestamptz(6)
  failureReason      String?   @map("failure_reason") @db.Text
  metadata           Json?     @default("{}") @db.JsonB
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  user               User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("email_logs")
}

model DeviceInfo {
  id                   String    @id @default(uuid()) @db.Uuid
  userId               String    @map("user_id") @db.Uuid
  deviceId             String    @unique @map("device_id") @db.VarChar(255)
  deviceType           String?   @map("device_type") @db.VarChar(50)
  deviceName           String?   @map("device_name") @db.VarChar(255)
  platform             String?   @db.VarChar(50)
  osName               String?   @map("os_name") @db.VarChar(100)
  osVersion            String?   @map("os_version") @db.VarChar(50)
  browserName          String?   @map("browser_name") @db.VarChar(100)
  browserVersion       String?   @map("browser_version") @db.VarChar(50)
  ipAddress            String?   @map("ip_address") @db.Inet
  userAgent            String?   @map("user_agent") @db.Text
  isTrusted            Boolean   @default(false) @map("is_trusted")
  lastSeenAt           DateTime  @default(now()) @map("last_seen_at") @db.Timestamptz(6)
  firstSeenAt          DateTime  @default(now()) @map("first_seen_at") @db.Timestamptz(6)
  fingerprintHash      String?   @map("fingerprint_hash") @db.Text
  lastAuthenticatedAt  DateTime? @map("last_authenticated_at") @db.Timestamptz(6)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("device_info")
}

// ============================================================================
// OTP TOKENS (for Twilio SMS OTP flow)
// Stores one-time codes sent to phones. Codes are stored hashed for security.
// ============================================================================

model OtpToken {
  id        String   @id @default(uuid()) @db.Uuid
  phone     String   @db.VarChar(20)
  tokenHash String   @map("token_hash") @db.Text
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([phone])
  @@map("otp_tokens")
}